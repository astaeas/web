# Используем образ Docker
image: docker:latest

# Включаем Docker-in-Docker (dind) для сборки контейнеров
services:
  - docker:dind

# Определяем переменные
variables:
  DOCKER_DRIVER: overlay2
  # DOCKER_REGISTRY: 192.168.56.3:5050  # Ваш Docker Registry
  IMAGE_NAME: $DOCKER_REGISTRY/root/web  # Имя образа
  TAG: $CI_COMMIT_SHORT_SHA  # Уникальный тег для образа

# Определяем этапы
stages:
  - build
  - push

# Сборка и загрузка frontend
build_and_push_frontend:
  stage: build
  script:
    - docker login $DOCKER_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker build -t $IMAGE_NAME/frontend:$TAG -f frontend/Dockerfile frontend/  # Сборка образа
    - docker push $IMAGE_NAME/frontend:$TAG  # Пуш образа в реестр
  only:
    - main  # Запускать только для главной ветки

# Сборка и загрузка backend
build_and_push_backend:
  stage: build
  script:
    - docker login $DOCKER_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker build -t $IMAGE_NAME/backend:$TAG -f backend/Dockerfile backend/  # Сборка образа
    - docker push $IMAGE_NAME/backend:$TAG  # Пуш образа в реестр
  only:
    - main  # Запускать только для главной ветки

# Сборка и загрузка nginx
build_and_push_nginx:
  stage: build
  script:
    - docker login $DOCKER_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker build -t $IMAGE_NAME/nginx:$TAG -f nginx/Dockerfile nginx/  # Сборка образа
    - docker push $IMAGE_NAME/nginx:$TAG  # Пуш образа в реестр
  only:
    - main  # Запускать только для главной ветки

